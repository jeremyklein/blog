name: Automated Blog Proofreading

on:
  pull_request:
    paths: ['content/posts/**/*.md']
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  proofread:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: content/posts/**/*.md

      - name: Setup proofreading script
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cat > proofread.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          async function proofreadPost(filePath, content) {
            const response = await fetch('https://api.anthropic.com/v1/messages', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
              },
              body: JSON.stringify({
                model: 'claude-3-haiku-20240307',
                max_tokens: 2000,
                messages: [{
                  role: 'user',
                  content: `Please proofread this blog post and provide specific feedback on:
          1. Grammar and spelling errors
          2. Writing clarity and flow
          3. Sentence structure improvements
          4. Tone consistency
          5. Technical accuracy (if applicable)

          Format your response as actionable suggestions. Be constructive and specific.

          Blog Post Content:
          ---
          ${content}
          ---`
                }]
              })
            });

            if (!response.ok) {
              throw new Error(`API request failed: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            return data.content[0].text;
          }

          async function main() {
            const changedFiles = process.env.CHANGED_FILES.split(' ');
            let allFeedback = [];

            for (const file of changedFiles) {
              if (file.trim() && fs.existsSync(file)) {
                console.log(`Proofreading: ${file}`);
                const content = fs.readFileSync(file, 'utf8');
                
                try {
                  const feedback = await proofreadPost(file, content);
                  allFeedback.push(`## 📝 Proofreading for \`${file}\`\n\n${feedback}`);
                } catch (error) {
                  console.error(`Error proofreading ${file}:`, error.message);
                  allFeedback.push(`## ❌ Error proofreading \`${file}\`\n\nFailed to proofread: ${error.message}`);
                }
              }
            }

            // Write feedback to file for GitHub comment
            const comment = `## 🤖 Automated Proofreading Results\n\n${allFeedback.join('\n\n---\n\n')}

          *This proofreading was performed by Claude AI. Please review suggestions carefully before applying.*`;
            
            fs.writeFileSync('proofreading-feedback.md', comment);
          }

          main().catch(console.error);
          EOF

      - name: Run proofreading
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: node proofread.js

      - name: Comment on PR
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('proofreading-feedback.md')) {
              const feedback = fs.readFileSync('proofreading-feedback.md', 'utf8');
              
              // Check if we already commented on this PR
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('🤖 Automated Proofreading Results')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: feedback
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: feedback
                });
              }
            }